
{{define "EPxy"}}
// EP{{.Inputs}}{{.Outputs}} is a utility type for entry points that receive {{.Inputs}} parameters and return {{.Outputs}} value(s)
type EP{{.Inputs}}{{.Outputs}}[S isc.SandboxBase{{range $i := until .Inputs}}, T{{add $i 1}} any{{end}}{{range $i := until .Outputs}}, R{{add $i 1}} any{{end}}{{range $i := until .Inputs}}, I{{add $i 1}} CallArgsCodec[T{{add $i 1}}]{{end}}{{range $i := until .Outputs}}, O{{add $i 1}} CallArgsCodec[R{{add $i 1}}]{{end}}] struct {
    EP{{.Inputs}}[S{{range $i := until .Inputs}}, T{{add $i 1}}{{end}}{{range $i := until .Inputs}}, I{{add $i 1}}{{end}}]
    {{range $i := until .Outputs}}Output{{add $i 1}} O{{add $i 1}}
    {{end}}
}

func NewEP{{.Inputs}}{{.Outputs}}[{{range $i := until .Inputs}}T{{add $i 1}} any, {{end}}{{range $i := until .Outputs}}R{{add $i 1}} any, {{end}}{{range $i := until .Inputs}}I{{add $i 1}} CallArgsCodec[T{{add $i 1}}], {{end}}{{range $i := until .Outputs}}O{{add $i 1}} CallArgsCodec[R{{add $i 1}}]{{if not (last $i $.Outputs)}}, {{end}}{{end}}](
    contract *ContractInfo, name string,
    {{range $i := until .Inputs}}in{{add $i 1}} I{{add $i 1}},
    {{end}}{{range $i := until .Outputs}}out{{add $i 1}} O{{add $i 1}},{{end}}
) EP{{.Inputs}}{{.Outputs}}[isc.Sandbox{{range $i := until .Inputs}}, T{{add $i 1}}{{end}}{{range $i := until .Outputs}}, R{{add $i 1}}{{end}}{{range $i := until .Inputs}}, I{{add $i 1}}{{end}}{{range $i := until .Outputs}}, O{{add $i 1}}{{end}}] {
    return EP{{.Inputs}}{{.Outputs}}[isc.Sandbox{{range $i := until .Inputs}}, T{{add $i 1}}{{end}}{{range $i := until .Outputs}}, R{{add $i 1}}{{end}}{{range $i := until .Inputs}}, I{{add $i 1}}{{end}}{{range $i := until .Outputs}}, O{{add $i 1}}{{end}}]{
        EP{{.Inputs}}: NewEP{{.Inputs}}(contract, name{{range $i := until .Inputs}}, in{{add $i 1}}{{end}}),
        {{range $i := until .Outputs}}Output{{add $i 1}}: out{{add $i 1}},
        {{end}}
    }
}

func NewViewEP{{.Inputs}}{{.Outputs}}[{{range $i := until .Inputs}}T{{add $i 1}} any, {{end}}{{range $i := until .Outputs}}R{{add $i 1}} any, {{end}}{{range $i := until .Inputs}}I{{add $i 1}} CallArgsCodec[T{{add $i 1}}], {{end}}{{range $i := until .Outputs}}O{{add $i 1}} CallArgsCodec[R{{add $i 1}}]{{if not (last $i $.Outputs)}}, {{end}}{{end}}](
    contract *ContractInfo, name string,
    {{range $i := until .Inputs}}in{{add $i 1}} I{{add $i 1}},
    {{end}}{{range $i := until .Outputs}}out{{add $i 1}} O{{add $i 1}},{{end}}
) EP{{.Inputs}}{{.Outputs}}[isc.SandboxView{{range $i := until .Inputs}}, T{{add $i 1}}{{end}}{{range $i := until .Outputs}}, R{{add $i 1}}{{end}}{{range $i := until .Inputs}}, I{{add $i 1}}{{end}}{{range $i := until .Outputs}}, O{{add $i 1}}{{end}}] {
    return EP{{.Inputs}}{{.Outputs}}[isc.SandboxView{{range $i := until .Inputs}}, T{{add $i 1}}{{end}}{{range $i := until .Outputs}}, R{{add $i 1}}{{end}}{{range $i := until .Inputs}}, I{{add $i 1}}{{end}}{{range $i := until .Outputs}}, O{{add $i 1}}{{end}}]{
        EP{{.Inputs}}: NewViewEP{{.Inputs}}(contract, name{{range $i := until .Inputs}}, in{{add $i 1}}{{end}}),
        {{range $i := until .Outputs}}Output{{add $i 1}}: out{{add $i 1}},
        {{end}}
    }
}

func (e EP{{.Inputs}}{{.Outputs}}[S{{range $i := until .Inputs}}, T{{add $i 1}}{{end}}{{range $i := until .Outputs}}, R{{add $i 1}}{{end}}{{range $i := until .Inputs}}, I{{add $i 1}}{{end}}{{range $i := until .Outputs}}, O{{add $i 1}}{{end}}]) Message({{range $i := until .Inputs}}p{{add $i 1}} T{{add $i 1}}{{if not (last $i $.Inputs)}}, {{end}}{{end}}) isc.Message {
    callArgs := isc.NewCallArguments({{range $i := until .Inputs}}e.Input{{add $i 1}}.Encode(p{{add $i 1}}){{if not (last $i $.Inputs)}}, {{end}}{{end}})
    return e.EntryPointInfo.Message(callArgs)
}

func (e EP{{.Inputs}}{{.Outputs}}[S{{range $i := until .Inputs}}, T{{add $i 1}}{{end}}{{range $i := until .Outputs}}, R{{add $i 1}}{{end}}{{range $i := until .Inputs}}, I{{add $i 1}}{{end}}{{range $i := until .Outputs}}, O{{add $i 1}}{{end}}]) WithHandler(f func(S{{range $i := until .Inputs}}, T{{add $i 1}}{{end}}) {{if gt .Outputs 1}}({{end}}{{range $i := until .Outputs}}R{{add $i 1}}{{if not (last $i $.Outputs)}}, {{end}}{{end}}{{if gt .Outputs 1}}){{end}}) *EntryPointHandler[S] {
    return e.EntryPointInfo.WithHandler(func(ctx S) isc.CallArguments {
        params := ctx.Params()
        {{range $i := until .Inputs}}p{{add $i 1}}, err := e.Input{{add $i 1}}.Decode(params.MustAt({{$i}}))
        ctx.RequireNoError(err)
        {{end}}

        {{if eq .Outputs 0}}
        f(ctx{{range $i := until .Inputs}}, p{{add $i 1}}{{end}})
        return isc.NewCallArguments()
        {{else if eq .Outputs 1}}
        r1 := f(ctx{{range $i := until .Inputs}}, p{{add $i 1}}{{end}})
        output1 := e.Output1.Encode(r1)
        return isc.NewCallArguments(output1)
        {{else}}
        {{range $i := until .Outputs}}r{{add $i 1}}{{if not (last $i $.Outputs)}}, {{end}}{{end}} := f(ctx{{range $i := until .Inputs}}, p{{add $i 1}}{{end}})
        {{range $i := until .Outputs}}output{{add $i 1}} := e.Output{{add $i 1}}.Encode(r{{add $i 1}})
        {{end}}
        return isc.NewCallArguments({{range $i := until .Outputs}}output{{add $i 1}}{{if not (last $i $.Outputs)}}, {{end}}{{end}})
        {{end}}
    })
}

{{if gt .Outputs 0}}
func (e EP{{.Inputs}}{{.Outputs}}[S{{range $i := until .Inputs}}, T{{add $i 1}}{{end}}{{range $i := until .Outputs}}, R{{add $i 1}}{{end}}{{range $i := until .Inputs}}, I{{add $i 1}}{{end}}{{range $i := until .Outputs}}, O{{add $i 1}}{{end}}]) DecodeOutput(arguments isc.CallArguments) ({{range $i := until .Outputs}}R{{add $i 1}}{{if not (last $i $.Outputs)}}, {{end}}{{end}}, error) {
    var err error
    {{range $i := until .Outputs}}var o{{add $i 1}} R{{add $i 1}}
    {{end}}
    {{range $i := until .Outputs}}
    i{{add $i 1}}, err := arguments.At({{$i}})
    if err != nil {
        return {{range $j := until $.Outputs}}o{{add $j 1}}{{if not (last $j $.Outputs)}}, {{end}}{{end}}, err
    }

    o{{add $i 1}}, err = e.Output{{add $i 1}}.Decode(i{{add $i 1}})
    if err != nil {
        return {{range $j := until $.Outputs}}o{{add $j 1}}{{if not (last $j $.Outputs)}}, {{end}}{{end}}, err
    }
    {{end}}

    return {{range $i := until .Outputs}}o{{add $i 1}}{{if not (last $i $.Outputs)}}, {{end}}{{end}}, nil
}

func (e EP{{.Inputs}}{{.Outputs}}[S{{range $i := until .Inputs}}, T{{add $i 1}}{{end}}{{range $i := until .Outputs}}, R{{add $i 1}}{{end}}{{range $i := until .Inputs}}, I{{add $i 1}}{{end}}{{range $i := until .Outputs}}, O{{add $i 1}}{{end}}]) Call(
    {{range $i := until .Inputs}}p{{add $i 1}} T{{add $i 1}}{{if not (last $i $.Inputs)}}, {{end}}{{end}},
    send func(msg isc.Message) (isc.CallArguments, error),
) ({{range $i := until .Outputs}}R{{add $i 1}}{{if not (last $i $.Outputs)}}, {{end}}{{end}}, error) {
    {{range $i := until .Outputs}}var o{{add $i 1}} R{{add $i 1}}
    {{end}}
    msg := e.Message({{range $i := until .Inputs}}p{{add $i 1}}{{if not (last $i $.Inputs)}}, {{end}}{{end}})
    res, err := send(msg)
    if err != nil {
        return {{range $j := until $.Outputs}}o{{add $j 1}}{{if not (last $j $.Outputs)}}, {{end}}{{end}}, err
    }

    return e.DecodeOutput(res)
}

{{else}}
func (e EP{{.Inputs}}{{.Outputs}}[S{{range $i := until .Inputs}}, T{{add $i 1}}{{end}}{{range $i := until .Outputs}}, R{{add $i 1}}{{end}}{{range $i := until .Inputs}}, I{{add $i 1}}{{end}}{{range $i := until .Outputs}}, O{{add $i 1}}{{end}}]) Call(
    {{range $i := until .Inputs}}p{{add $i 1}} T{{add $i 1}}{{if not (last $i $.Inputs)}}, {{end}}{{end}},
    send func(msg isc.Message) (isc.CallArguments, error),
) error {
    msg := e.Message({{range $i := until .Inputs}}p{{add $i 1}}{{if not (last $i $.Inputs)}}, {{end}}{{end}})
    res, err := send(msg)
    if err != nil {
        return err
    }
    if len(res) != 0 {
        return fmt.Errorf("unexpected number of results: expected 0, got %v", len(res))
    }

    return nil
}



{{end}}

func (e EP{{.Inputs}}{{.Outputs}}[S{{range $i := until .Inputs}}, T{{add $i 1}}{{end}}{{range $i := until .Outputs}}, R{{add $i 1}}{{end}}{{range $i := until .Inputs}}, I{{add $i 1}}{{end}}{{range $i := until .Outputs}}, O{{add $i 1}}{{end}}]) Inputs() []FieldArg {
	inputs := make([]FieldArg, 0)

	{{range $i := until .Inputs}}
        inputs = append(inputs, e.Input{{add $i 1}})     {{end}}

	return inputs
}

func (e EP{{.Inputs}}{{.Outputs}}[S{{range $i := until .Inputs}}, T{{add $i 1}}{{end}}{{range $i := until .Outputs}}, R{{add $i 1}}{{end}}{{range $i := until .Inputs}}, I{{add $i 1}}{{end}}{{range $i := until .Outputs}}, O{{add $i 1}}{{end}}]) Outputs() []FieldArg {
	outputs := make([]FieldArg, 0)

	{{range $i := until .Outputs}}
        outputs = append(outputs, e.Output{{add $i 1}})     {{end}}

	return outputs
}
{{end}}

