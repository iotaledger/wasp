/*
Wasp API

REST API for the Wasp node

API version: 0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AccountObjectsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountObjectsResponse{}

// AccountObjectsResponse struct for AccountObjectsResponse
type AccountObjectsResponse struct {
	ObjectIds []string `json:"objectIds"`
}

type _AccountObjectsResponse AccountObjectsResponse

// NewAccountObjectsResponse instantiates a new AccountObjectsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountObjectsResponse(objectIds []string) *AccountObjectsResponse {
	this := AccountObjectsResponse{}
	this.ObjectIds = objectIds
	return &this
}

// NewAccountObjectsResponseWithDefaults instantiates a new AccountObjectsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountObjectsResponseWithDefaults() *AccountObjectsResponse {
	this := AccountObjectsResponse{}
	return &this
}

// GetObjectIds returns the ObjectIds field value
func (o *AccountObjectsResponse) GetObjectIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ObjectIds
}

// GetObjectIdsOk returns a tuple with the ObjectIds field value
// and a boolean to check if the value has been set.
func (o *AccountObjectsResponse) GetObjectIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ObjectIds, true
}

// SetObjectIds sets field value
func (o *AccountObjectsResponse) SetObjectIds(v []string) {
	o.ObjectIds = v
}

func (o AccountObjectsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountObjectsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["objectIds"] = o.ObjectIds
	return toSerialize, nil
}

func (o *AccountObjectsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"objectIds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccountObjectsResponse := _AccountObjectsResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccountObjectsResponse)

	if err != nil {
		return err
	}

	*o = AccountObjectsResponse(varAccountObjectsResponse)

	return err
}

type NullableAccountObjectsResponse struct {
	value *AccountObjectsResponse
	isSet bool
}

func (v NullableAccountObjectsResponse) Get() *AccountObjectsResponse {
	return v.value
}

func (v *NullableAccountObjectsResponse) Set(val *AccountObjectsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountObjectsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountObjectsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountObjectsResponse(val *AccountObjectsResponse) *NullableAccountObjectsResponse {
	return &NullableAccountObjectsResponse{value: val, isSet: true}
}

func (v NullableAccountObjectsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountObjectsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


