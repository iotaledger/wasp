/*
Wasp API

REST API for the Wasp node

API version: 0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChainInfoResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChainInfoResponse{}

// ChainInfoResponse struct for ChainInfoResponse
type ChainInfoResponse struct {
	// The chain admin address (Hex Address)
	ChainAdmin string `json:"chainAdmin"`
	// ChainID (Hex Address)
	ChainID string `json:"chainID"`
	// The EVM chain ID
	EvmChainId uint32 `json:"evmChainId"`
	GasFeePolicy FeePolicy `json:"gasFeePolicy"`
	GasLimits Limits `json:"gasLimits"`
	// Whether or not the chain is active
	IsActive bool `json:"isActive"`
	Metadata PublicChainMetadata `json:"metadata"`
	// The fully qualified public url leading to the chains metadata
	PublicURL string `json:"publicURL"`
}

type _ChainInfoResponse ChainInfoResponse

// NewChainInfoResponse instantiates a new ChainInfoResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChainInfoResponse(chainAdmin string, chainID string, evmChainId uint32, gasFeePolicy FeePolicy, gasLimits Limits, isActive bool, metadata PublicChainMetadata, publicURL string) *ChainInfoResponse {
	this := ChainInfoResponse{}
	this.ChainAdmin = chainAdmin
	this.ChainID = chainID
	this.EvmChainId = evmChainId
	this.GasFeePolicy = gasFeePolicy
	this.GasLimits = gasLimits
	this.IsActive = isActive
	this.Metadata = metadata
	this.PublicURL = publicURL
	return &this
}

// NewChainInfoResponseWithDefaults instantiates a new ChainInfoResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChainInfoResponseWithDefaults() *ChainInfoResponse {
	this := ChainInfoResponse{}
	return &this
}

// GetChainAdmin returns the ChainAdmin field value
func (o *ChainInfoResponse) GetChainAdmin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChainAdmin
}

// GetChainAdminOk returns a tuple with the ChainAdmin field value
// and a boolean to check if the value has been set.
func (o *ChainInfoResponse) GetChainAdminOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChainAdmin, true
}

// SetChainAdmin sets field value
func (o *ChainInfoResponse) SetChainAdmin(v string) {
	o.ChainAdmin = v
}

// GetChainID returns the ChainID field value
func (o *ChainInfoResponse) GetChainID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChainID
}

// GetChainIDOk returns a tuple with the ChainID field value
// and a boolean to check if the value has been set.
func (o *ChainInfoResponse) GetChainIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChainID, true
}

// SetChainID sets field value
func (o *ChainInfoResponse) SetChainID(v string) {
	o.ChainID = v
}

// GetEvmChainId returns the EvmChainId field value
func (o *ChainInfoResponse) GetEvmChainId() uint32 {
	if o == nil {
		var ret uint32
		return ret
	}

	return o.EvmChainId
}

// GetEvmChainIdOk returns a tuple with the EvmChainId field value
// and a boolean to check if the value has been set.
func (o *ChainInfoResponse) GetEvmChainIdOk() (*uint32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EvmChainId, true
}

// SetEvmChainId sets field value
func (o *ChainInfoResponse) SetEvmChainId(v uint32) {
	o.EvmChainId = v
}

// GetGasFeePolicy returns the GasFeePolicy field value
func (o *ChainInfoResponse) GetGasFeePolicy() FeePolicy {
	if o == nil {
		var ret FeePolicy
		return ret
	}

	return o.GasFeePolicy
}

// GetGasFeePolicyOk returns a tuple with the GasFeePolicy field value
// and a boolean to check if the value has been set.
func (o *ChainInfoResponse) GetGasFeePolicyOk() (*FeePolicy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GasFeePolicy, true
}

// SetGasFeePolicy sets field value
func (o *ChainInfoResponse) SetGasFeePolicy(v FeePolicy) {
	o.GasFeePolicy = v
}

// GetGasLimits returns the GasLimits field value
func (o *ChainInfoResponse) GetGasLimits() Limits {
	if o == nil {
		var ret Limits
		return ret
	}

	return o.GasLimits
}

// GetGasLimitsOk returns a tuple with the GasLimits field value
// and a boolean to check if the value has been set.
func (o *ChainInfoResponse) GetGasLimitsOk() (*Limits, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GasLimits, true
}

// SetGasLimits sets field value
func (o *ChainInfoResponse) SetGasLimits(v Limits) {
	o.GasLimits = v
}

// GetIsActive returns the IsActive field value
func (o *ChainInfoResponse) GetIsActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value
// and a boolean to check if the value has been set.
func (o *ChainInfoResponse) GetIsActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsActive, true
}

// SetIsActive sets field value
func (o *ChainInfoResponse) SetIsActive(v bool) {
	o.IsActive = v
}

// GetMetadata returns the Metadata field value
func (o *ChainInfoResponse) GetMetadata() PublicChainMetadata {
	if o == nil {
		var ret PublicChainMetadata
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
func (o *ChainInfoResponse) GetMetadataOk() (*PublicChainMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metadata, true
}

// SetMetadata sets field value
func (o *ChainInfoResponse) SetMetadata(v PublicChainMetadata) {
	o.Metadata = v
}

// GetPublicURL returns the PublicURL field value
func (o *ChainInfoResponse) GetPublicURL() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicURL
}

// GetPublicURLOk returns a tuple with the PublicURL field value
// and a boolean to check if the value has been set.
func (o *ChainInfoResponse) GetPublicURLOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicURL, true
}

// SetPublicURL sets field value
func (o *ChainInfoResponse) SetPublicURL(v string) {
	o.PublicURL = v
}

func (o ChainInfoResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChainInfoResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["chainAdmin"] = o.ChainAdmin
	toSerialize["chainID"] = o.ChainID
	toSerialize["evmChainId"] = o.EvmChainId
	toSerialize["gasFeePolicy"] = o.GasFeePolicy
	toSerialize["gasLimits"] = o.GasLimits
	toSerialize["isActive"] = o.IsActive
	toSerialize["metadata"] = o.Metadata
	toSerialize["publicURL"] = o.PublicURL
	return toSerialize, nil
}

func (o *ChainInfoResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"chainAdmin",
		"chainID",
		"evmChainId",
		"gasFeePolicy",
		"gasLimits",
		"isActive",
		"metadata",
		"publicURL",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChainInfoResponse := _ChainInfoResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChainInfoResponse)

	if err != nil {
		return err
	}

	*o = ChainInfoResponse(varChainInfoResponse)

	return err
}

type NullableChainInfoResponse struct {
	value *ChainInfoResponse
	isSet bool
}

func (v NullableChainInfoResponse) Get() *ChainInfoResponse {
	return v.value
}

func (v *NullableChainInfoResponse) Set(val *ChainInfoResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableChainInfoResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableChainInfoResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChainInfoResponse(val *ChainInfoResponse) *NullableChainInfoResponse {
	return &NullableChainInfoResponse{value: val, isSet: true}
}

func (v NullableChainInfoResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChainInfoResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


