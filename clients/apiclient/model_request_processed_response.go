/*
Wasp API

REST API for the Wasp node

API version: 0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RequestProcessedResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RequestProcessedResponse{}

// RequestProcessedResponse struct for RequestProcessedResponse
type RequestProcessedResponse struct {
	ChainId string `json:"chainId"`
	IsProcessed bool `json:"isProcessed"`
	RequestId string `json:"requestId"`
}

type _RequestProcessedResponse RequestProcessedResponse

// NewRequestProcessedResponse instantiates a new RequestProcessedResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestProcessedResponse(chainId string, isProcessed bool, requestId string) *RequestProcessedResponse {
	this := RequestProcessedResponse{}
	this.ChainId = chainId
	this.IsProcessed = isProcessed
	this.RequestId = requestId
	return &this
}

// NewRequestProcessedResponseWithDefaults instantiates a new RequestProcessedResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestProcessedResponseWithDefaults() *RequestProcessedResponse {
	this := RequestProcessedResponse{}
	return &this
}

// GetChainId returns the ChainId field value
func (o *RequestProcessedResponse) GetChainId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value
// and a boolean to check if the value has been set.
func (o *RequestProcessedResponse) GetChainIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChainId, true
}

// SetChainId sets field value
func (o *RequestProcessedResponse) SetChainId(v string) {
	o.ChainId = v
}

// GetIsProcessed returns the IsProcessed field value
func (o *RequestProcessedResponse) GetIsProcessed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsProcessed
}

// GetIsProcessedOk returns a tuple with the IsProcessed field value
// and a boolean to check if the value has been set.
func (o *RequestProcessedResponse) GetIsProcessedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsProcessed, true
}

// SetIsProcessed sets field value
func (o *RequestProcessedResponse) SetIsProcessed(v bool) {
	o.IsProcessed = v
}

// GetRequestId returns the RequestId field value
func (o *RequestProcessedResponse) GetRequestId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RequestId
}

// GetRequestIdOk returns a tuple with the RequestId field value
// and a boolean to check if the value has been set.
func (o *RequestProcessedResponse) GetRequestIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestId, true
}

// SetRequestId sets field value
func (o *RequestProcessedResponse) SetRequestId(v string) {
	o.RequestId = v
}

func (o RequestProcessedResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RequestProcessedResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["chainId"] = o.ChainId
	toSerialize["isProcessed"] = o.IsProcessed
	toSerialize["requestId"] = o.RequestId
	return toSerialize, nil
}

func (o *RequestProcessedResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"chainId",
		"isProcessed",
		"requestId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRequestProcessedResponse := _RequestProcessedResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRequestProcessedResponse)

	if err != nil {
		return err
	}

	*o = RequestProcessedResponse(varRequestProcessedResponse)

	return err
}

type NullableRequestProcessedResponse struct {
	value *RequestProcessedResponse
	isSet bool
}

func (v NullableRequestProcessedResponse) Get() *RequestProcessedResponse {
	return v.value
}

func (v *NullableRequestProcessedResponse) Set(val *RequestProcessedResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestProcessedResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestProcessedResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestProcessedResponse(val *RequestProcessedResponse) *NullableRequestProcessedResponse {
	return &NullableRequestProcessedResponse{value: val, isSet: true}
}

func (v NullableRequestProcessedResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestProcessedResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


