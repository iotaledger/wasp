/*
Wasp API

REST API for the Wasp node

API version: 0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ControlAddressesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ControlAddressesResponse{}

// ControlAddressesResponse struct for ControlAddressesResponse
type ControlAddressesResponse struct {
	// The anchor owner (Hex Address)
	AnchorOwner string `json:"anchorOwner"`
	// The chain admin (Hex Address)
	ChainAdmin string `json:"chainAdmin"`
	// The block index (uint32
	SinceBlockIndex uint32 `json:"sinceBlockIndex"`
}

type _ControlAddressesResponse ControlAddressesResponse

// NewControlAddressesResponse instantiates a new ControlAddressesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewControlAddressesResponse(anchorOwner string, chainAdmin string, sinceBlockIndex uint32) *ControlAddressesResponse {
	this := ControlAddressesResponse{}
	this.AnchorOwner = anchorOwner
	this.ChainAdmin = chainAdmin
	this.SinceBlockIndex = sinceBlockIndex
	return &this
}

// NewControlAddressesResponseWithDefaults instantiates a new ControlAddressesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControlAddressesResponseWithDefaults() *ControlAddressesResponse {
	this := ControlAddressesResponse{}
	return &this
}

// GetAnchorOwner returns the AnchorOwner field value
func (o *ControlAddressesResponse) GetAnchorOwner() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AnchorOwner
}

// GetAnchorOwnerOk returns a tuple with the AnchorOwner field value
// and a boolean to check if the value has been set.
func (o *ControlAddressesResponse) GetAnchorOwnerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AnchorOwner, true
}

// SetAnchorOwner sets field value
func (o *ControlAddressesResponse) SetAnchorOwner(v string) {
	o.AnchorOwner = v
}

// GetChainAdmin returns the ChainAdmin field value
func (o *ControlAddressesResponse) GetChainAdmin() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChainAdmin
}

// GetChainAdminOk returns a tuple with the ChainAdmin field value
// and a boolean to check if the value has been set.
func (o *ControlAddressesResponse) GetChainAdminOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChainAdmin, true
}

// SetChainAdmin sets field value
func (o *ControlAddressesResponse) SetChainAdmin(v string) {
	o.ChainAdmin = v
}

// GetSinceBlockIndex returns the SinceBlockIndex field value
func (o *ControlAddressesResponse) GetSinceBlockIndex() uint32 {
	if o == nil {
		var ret uint32
		return ret
	}

	return o.SinceBlockIndex
}

// GetSinceBlockIndexOk returns a tuple with the SinceBlockIndex field value
// and a boolean to check if the value has been set.
func (o *ControlAddressesResponse) GetSinceBlockIndexOk() (*uint32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SinceBlockIndex, true
}

// SetSinceBlockIndex sets field value
func (o *ControlAddressesResponse) SetSinceBlockIndex(v uint32) {
	o.SinceBlockIndex = v
}

func (o ControlAddressesResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ControlAddressesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["anchorOwner"] = o.AnchorOwner
	toSerialize["chainAdmin"] = o.ChainAdmin
	toSerialize["sinceBlockIndex"] = o.SinceBlockIndex
	return toSerialize, nil
}

func (o *ControlAddressesResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"anchorOwner",
		"chainAdmin",
		"sinceBlockIndex",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varControlAddressesResponse := _ControlAddressesResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varControlAddressesResponse)

	if err != nil {
		return err
	}

	*o = ControlAddressesResponse(varControlAddressesResponse)

	return err
}

type NullableControlAddressesResponse struct {
	value *ControlAddressesResponse
	isSet bool
}

func (v NullableControlAddressesResponse) Get() *ControlAddressesResponse {
	return v.value
}

func (v *NullableControlAddressesResponse) Set(val *ControlAddressesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableControlAddressesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableControlAddressesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControlAddressesResponse(val *ControlAddressesResponse) *NullableControlAddressesResponse {
	return &NullableControlAddressesResponse{value: val, isSet: true}
}

func (v NullableControlAddressesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControlAddressesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


