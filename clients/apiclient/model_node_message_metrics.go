/*
Wasp API

REST API for the Wasp node

API version: 0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NodeMessageMetrics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeMessageMetrics{}

// NodeMessageMetrics struct for NodeMessageMetrics
type NodeMessageMetrics struct {
	InAnchor AnchorMetricItem `json:"inAnchor"`
	InOnLedgerRequest OnLedgerRequestMetricItem `json:"inOnLedgerRequest"`
	OutPublisherStateTransaction PublisherStateTransactionItem `json:"outPublisherStateTransaction"`
	RegisteredChainIDs []string `json:"registeredChainIDs"`
}

type _NodeMessageMetrics NodeMessageMetrics

// NewNodeMessageMetrics instantiates a new NodeMessageMetrics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeMessageMetrics(inAnchor AnchorMetricItem, inOnLedgerRequest OnLedgerRequestMetricItem, outPublisherStateTransaction PublisherStateTransactionItem, registeredChainIDs []string) *NodeMessageMetrics {
	this := NodeMessageMetrics{}
	this.InAnchor = inAnchor
	this.InOnLedgerRequest = inOnLedgerRequest
	this.OutPublisherStateTransaction = outPublisherStateTransaction
	this.RegisteredChainIDs = registeredChainIDs
	return &this
}

// NewNodeMessageMetricsWithDefaults instantiates a new NodeMessageMetrics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeMessageMetricsWithDefaults() *NodeMessageMetrics {
	this := NodeMessageMetrics{}
	return &this
}

// GetInAnchor returns the InAnchor field value
func (o *NodeMessageMetrics) GetInAnchor() AnchorMetricItem {
	if o == nil {
		var ret AnchorMetricItem
		return ret
	}

	return o.InAnchor
}

// GetInAnchorOk returns a tuple with the InAnchor field value
// and a boolean to check if the value has been set.
func (o *NodeMessageMetrics) GetInAnchorOk() (*AnchorMetricItem, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InAnchor, true
}

// SetInAnchor sets field value
func (o *NodeMessageMetrics) SetInAnchor(v AnchorMetricItem) {
	o.InAnchor = v
}

// GetInOnLedgerRequest returns the InOnLedgerRequest field value
func (o *NodeMessageMetrics) GetInOnLedgerRequest() OnLedgerRequestMetricItem {
	if o == nil {
		var ret OnLedgerRequestMetricItem
		return ret
	}

	return o.InOnLedgerRequest
}

// GetInOnLedgerRequestOk returns a tuple with the InOnLedgerRequest field value
// and a boolean to check if the value has been set.
func (o *NodeMessageMetrics) GetInOnLedgerRequestOk() (*OnLedgerRequestMetricItem, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InOnLedgerRequest, true
}

// SetInOnLedgerRequest sets field value
func (o *NodeMessageMetrics) SetInOnLedgerRequest(v OnLedgerRequestMetricItem) {
	o.InOnLedgerRequest = v
}

// GetOutPublisherStateTransaction returns the OutPublisherStateTransaction field value
func (o *NodeMessageMetrics) GetOutPublisherStateTransaction() PublisherStateTransactionItem {
	if o == nil {
		var ret PublisherStateTransactionItem
		return ret
	}

	return o.OutPublisherStateTransaction
}

// GetOutPublisherStateTransactionOk returns a tuple with the OutPublisherStateTransaction field value
// and a boolean to check if the value has been set.
func (o *NodeMessageMetrics) GetOutPublisherStateTransactionOk() (*PublisherStateTransactionItem, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OutPublisherStateTransaction, true
}

// SetOutPublisherStateTransaction sets field value
func (o *NodeMessageMetrics) SetOutPublisherStateTransaction(v PublisherStateTransactionItem) {
	o.OutPublisherStateTransaction = v
}

// GetRegisteredChainIDs returns the RegisteredChainIDs field value
func (o *NodeMessageMetrics) GetRegisteredChainIDs() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.RegisteredChainIDs
}

// GetRegisteredChainIDsOk returns a tuple with the RegisteredChainIDs field value
// and a boolean to check if the value has been set.
func (o *NodeMessageMetrics) GetRegisteredChainIDsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegisteredChainIDs, true
}

// SetRegisteredChainIDs sets field value
func (o *NodeMessageMetrics) SetRegisteredChainIDs(v []string) {
	o.RegisteredChainIDs = v
}

func (o NodeMessageMetrics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeMessageMetrics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["inAnchor"] = o.InAnchor
	toSerialize["inOnLedgerRequest"] = o.InOnLedgerRequest
	toSerialize["outPublisherStateTransaction"] = o.OutPublisherStateTransaction
	toSerialize["registeredChainIDs"] = o.RegisteredChainIDs
	return toSerialize, nil
}

func (o *NodeMessageMetrics) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"inAnchor",
		"inOnLedgerRequest",
		"outPublisherStateTransaction",
		"registeredChainIDs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNodeMessageMetrics := _NodeMessageMetrics{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNodeMessageMetrics)

	if err != nil {
		return err
	}

	*o = NodeMessageMetrics(varNodeMessageMetrics)

	return err
}

type NullableNodeMessageMetrics struct {
	value *NodeMessageMetrics
	isSet bool
}

func (v NullableNodeMessageMetrics) Get() *NodeMessageMetrics {
	return v.value
}

func (v *NullableNodeMessageMetrics) Set(val *NodeMessageMetrics) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeMessageMetrics) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeMessageMetrics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeMessageMetrics(val *NodeMessageMetrics) *NullableNodeMessageMetrics {
	return &NullableNodeMessageMetrics{value: val, isSet: true}
}

func (v NullableNodeMessageMetrics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeMessageMetrics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


