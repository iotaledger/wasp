/*
Wasp API

REST API for the Wasp node

API version: 0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the BigInt type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BigInt{}

// BigInt struct for BigInt
type BigInt struct {
	Int *Int `json:"Int,omitempty"`
}

// NewBigInt instantiates a new BigInt object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBigInt() *BigInt {
	this := BigInt{}
	return &this
}

// NewBigIntWithDefaults instantiates a new BigInt object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBigIntWithDefaults() *BigInt {
	this := BigInt{}
	return &this
}

// GetInt returns the Int field value if set, zero value otherwise.
func (o *BigInt) GetInt() Int {
	if o == nil || IsNil(o.Int) {
		var ret Int
		return ret
	}
	return *o.Int
}

// GetIntOk returns a tuple with the Int field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BigInt) GetIntOk() (*Int, bool) {
	if o == nil || IsNil(o.Int) {
		return nil, false
	}
	return o.Int, true
}

// HasInt returns a boolean if a field has been set.
func (o *BigInt) HasInt() bool {
	if o != nil && !IsNil(o.Int) {
		return true
	}

	return false
}

// SetInt gets a reference to the given Int and assigns it to the Int field.
func (o *BigInt) SetInt(v Int) {
	o.Int = &v
}

func (o BigInt) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BigInt) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Int) {
		toSerialize["Int"] = o.Int
	}
	return toSerialize, nil
}

type NullableBigInt struct {
	value *BigInt
	isSet bool
}

func (v NullableBigInt) Get() *BigInt {
	return v.value
}

func (v *NullableBigInt) Set(val *BigInt) {
	v.value = val
	v.isSet = true
}

func (v NullableBigInt) IsSet() bool {
	return v.isSet
}

func (v *NullableBigInt) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBigInt(val *BigInt) *NullableBigInt {
	return &NullableBigInt{value: val, isSet: true}
}

func (v NullableBigInt) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBigInt) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


