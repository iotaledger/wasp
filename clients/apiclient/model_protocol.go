/*
Wasp API

REST API for the Wasp node

API version: 0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Protocol type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Protocol{}

// Protocol struct for Protocol
type Protocol struct {
	Epoch BigInt `json:"epoch"`
	EpochDurationMs BigInt `json:"epoch_duration_ms"`
	EpochStartTimestampMs BigInt `json:"epoch_start_timestamp_ms"`
	ProtocolVersion BigInt `json:"protocol_version"`
	ReferenceGasPrice BigInt `json:"reference_gas_price"`
	SystemStateVersion BigInt `json:"system_state_version"`
}

type _Protocol Protocol

// NewProtocol instantiates a new Protocol object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtocol(epoch BigInt, epochDurationMs BigInt, epochStartTimestampMs BigInt, protocolVersion BigInt, referenceGasPrice BigInt, systemStateVersion BigInt) *Protocol {
	this := Protocol{}
	this.Epoch = epoch
	this.EpochDurationMs = epochDurationMs
	this.EpochStartTimestampMs = epochStartTimestampMs
	this.ProtocolVersion = protocolVersion
	this.ReferenceGasPrice = referenceGasPrice
	this.SystemStateVersion = systemStateVersion
	return &this
}

// NewProtocolWithDefaults instantiates a new Protocol object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtocolWithDefaults() *Protocol {
	this := Protocol{}
	return &this
}

// GetEpoch returns the Epoch field value
func (o *Protocol) GetEpoch() BigInt {
	if o == nil {
		var ret BigInt
		return ret
	}

	return o.Epoch
}

// GetEpochOk returns a tuple with the Epoch field value
// and a boolean to check if the value has been set.
func (o *Protocol) GetEpochOk() (*BigInt, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Epoch, true
}

// SetEpoch sets field value
func (o *Protocol) SetEpoch(v BigInt) {
	o.Epoch = v
}

// GetEpochDurationMs returns the EpochDurationMs field value
func (o *Protocol) GetEpochDurationMs() BigInt {
	if o == nil {
		var ret BigInt
		return ret
	}

	return o.EpochDurationMs
}

// GetEpochDurationMsOk returns a tuple with the EpochDurationMs field value
// and a boolean to check if the value has been set.
func (o *Protocol) GetEpochDurationMsOk() (*BigInt, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EpochDurationMs, true
}

// SetEpochDurationMs sets field value
func (o *Protocol) SetEpochDurationMs(v BigInt) {
	o.EpochDurationMs = v
}

// GetEpochStartTimestampMs returns the EpochStartTimestampMs field value
func (o *Protocol) GetEpochStartTimestampMs() BigInt {
	if o == nil {
		var ret BigInt
		return ret
	}

	return o.EpochStartTimestampMs
}

// GetEpochStartTimestampMsOk returns a tuple with the EpochStartTimestampMs field value
// and a boolean to check if the value has been set.
func (o *Protocol) GetEpochStartTimestampMsOk() (*BigInt, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EpochStartTimestampMs, true
}

// SetEpochStartTimestampMs sets field value
func (o *Protocol) SetEpochStartTimestampMs(v BigInt) {
	o.EpochStartTimestampMs = v
}

// GetProtocolVersion returns the ProtocolVersion field value
func (o *Protocol) GetProtocolVersion() BigInt {
	if o == nil {
		var ret BigInt
		return ret
	}

	return o.ProtocolVersion
}

// GetProtocolVersionOk returns a tuple with the ProtocolVersion field value
// and a boolean to check if the value has been set.
func (o *Protocol) GetProtocolVersionOk() (*BigInt, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProtocolVersion, true
}

// SetProtocolVersion sets field value
func (o *Protocol) SetProtocolVersion(v BigInt) {
	o.ProtocolVersion = v
}

// GetReferenceGasPrice returns the ReferenceGasPrice field value
func (o *Protocol) GetReferenceGasPrice() BigInt {
	if o == nil {
		var ret BigInt
		return ret
	}

	return o.ReferenceGasPrice
}

// GetReferenceGasPriceOk returns a tuple with the ReferenceGasPrice field value
// and a boolean to check if the value has been set.
func (o *Protocol) GetReferenceGasPriceOk() (*BigInt, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReferenceGasPrice, true
}

// SetReferenceGasPrice sets field value
func (o *Protocol) SetReferenceGasPrice(v BigInt) {
	o.ReferenceGasPrice = v
}

// GetSystemStateVersion returns the SystemStateVersion field value
func (o *Protocol) GetSystemStateVersion() BigInt {
	if o == nil {
		var ret BigInt
		return ret
	}

	return o.SystemStateVersion
}

// GetSystemStateVersionOk returns a tuple with the SystemStateVersion field value
// and a boolean to check if the value has been set.
func (o *Protocol) GetSystemStateVersionOk() (*BigInt, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SystemStateVersion, true
}

// SetSystemStateVersion sets field value
func (o *Protocol) SetSystemStateVersion(v BigInt) {
	o.SystemStateVersion = v
}

func (o Protocol) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Protocol) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["epoch"] = o.Epoch
	toSerialize["epoch_duration_ms"] = o.EpochDurationMs
	toSerialize["epoch_start_timestamp_ms"] = o.EpochStartTimestampMs
	toSerialize["protocol_version"] = o.ProtocolVersion
	toSerialize["reference_gas_price"] = o.ReferenceGasPrice
	toSerialize["system_state_version"] = o.SystemStateVersion
	return toSerialize, nil
}

func (o *Protocol) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"epoch",
		"epoch_duration_ms",
		"epoch_start_timestamp_ms",
		"protocol_version",
		"reference_gas_price",
		"system_state_version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProtocol := _Protocol{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProtocol)

	if err != nil {
		return err
	}

	*o = Protocol(varProtocol)

	return err
}

type NullableProtocol struct {
	value *Protocol
	isSet bool
}

func (v NullableProtocol) Get() *Protocol {
	return v.value
}

func (v *NullableProtocol) Set(val *Protocol) {
	v.value = val
	v.isSet = true
}

func (v NullableProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtocol(val *Protocol) *NullableProtocol {
	return &NullableProtocol{value: val, isSet: true}
}

func (v NullableProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


