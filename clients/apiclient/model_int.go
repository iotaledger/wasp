/*
Wasp API

REST API for the Wasp node

API version: 0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
)

// checks if the Int type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Int{}

// Int struct for Int
type Int struct {
	Abs []int32 `json:"abs,omitempty"`
	Neg *bool `json:"neg,omitempty"`
}

// NewInt instantiates a new Int object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInt() *Int {
	this := Int{}
	return &this
}

// NewIntWithDefaults instantiates a new Int object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntWithDefaults() *Int {
	this := Int{}
	return &this
}

// GetAbs returns the Abs field value if set, zero value otherwise.
func (o *Int) GetAbs() []int32 {
	if o == nil || IsNil(o.Abs) {
		var ret []int32
		return ret
	}
	return o.Abs
}

// GetAbsOk returns a tuple with the Abs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Int) GetAbsOk() ([]int32, bool) {
	if o == nil || IsNil(o.Abs) {
		return nil, false
	}
	return o.Abs, true
}

// HasAbs returns a boolean if a field has been set.
func (o *Int) HasAbs() bool {
	if o != nil && !IsNil(o.Abs) {
		return true
	}

	return false
}

// SetAbs gets a reference to the given []int32 and assigns it to the Abs field.
func (o *Int) SetAbs(v []int32) {
	o.Abs = v
}

// GetNeg returns the Neg field value if set, zero value otherwise.
func (o *Int) GetNeg() bool {
	if o == nil || IsNil(o.Neg) {
		var ret bool
		return ret
	}
	return *o.Neg
}

// GetNegOk returns a tuple with the Neg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Int) GetNegOk() (*bool, bool) {
	if o == nil || IsNil(o.Neg) {
		return nil, false
	}
	return o.Neg, true
}

// HasNeg returns a boolean if a field has been set.
func (o *Int) HasNeg() bool {
	if o != nil && !IsNil(o.Neg) {
		return true
	}

	return false
}

// SetNeg gets a reference to the given bool and assigns it to the Neg field.
func (o *Int) SetNeg(v bool) {
	o.Neg = &v
}

func (o Int) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Int) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Abs) {
		toSerialize["abs"] = o.Abs
	}
	if !IsNil(o.Neg) {
		toSerialize["neg"] = o.Neg
	}
	return toSerialize, nil
}

type NullableInt struct {
	value *Int
	isSet bool
}

func (v NullableInt) Get() *Int {
	return v.value
}

func (v *NullableInt) Set(val *Int) {
	v.value = val
	v.isSet = true
}

func (v NullableInt) IsSet() bool {
	return v.isSet
}

func (v *NullableInt) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInt(val *Int) *NullableInt {
	return &NullableInt{value: val, isSet: true}
}

func (v NullableInt) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInt) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


