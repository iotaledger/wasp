/*
Wasp API

REST API for the Wasp node

API version: 0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Ratio32 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ratio32{}

// Ratio32 struct for Ratio32
type Ratio32 struct {
	A uint32 `json:"a"`
	B uint32 `json:"b"`
}

type _Ratio32 Ratio32

// NewRatio32 instantiates a new Ratio32 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRatio32(a uint32, b uint32) *Ratio32 {
	this := Ratio32{}
	this.A = a
	this.B = b
	return &this
}

// NewRatio32WithDefaults instantiates a new Ratio32 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRatio32WithDefaults() *Ratio32 {
	this := Ratio32{}
	return &this
}

// GetA returns the A field value
func (o *Ratio32) GetA() uint32 {
	if o == nil {
		var ret uint32
		return ret
	}

	return o.A
}

// GetAOk returns a tuple with the A field value
// and a boolean to check if the value has been set.
func (o *Ratio32) GetAOk() (*uint32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.A, true
}

// SetA sets field value
func (o *Ratio32) SetA(v uint32) {
	o.A = v
}

// GetB returns the B field value
func (o *Ratio32) GetB() uint32 {
	if o == nil {
		var ret uint32
		return ret
	}

	return o.B
}

// GetBOk returns a tuple with the B field value
// and a boolean to check if the value has been set.
func (o *Ratio32) GetBOk() (*uint32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.B, true
}

// SetB sets field value
func (o *Ratio32) SetB(v uint32) {
	o.B = v
}

func (o Ratio32) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ratio32) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["a"] = o.A
	toSerialize["b"] = o.B
	return toSerialize, nil
}

func (o *Ratio32) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"a",
		"b",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRatio32 := _Ratio32{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRatio32)

	if err != nil {
		return err
	}

	*o = Ratio32(varRatio32)

	return err
}

type NullableRatio32 struct {
	value *Ratio32
	isSet bool
}

func (v NullableRatio32) Get() *Ratio32 {
	return v.value
}

func (v *NullableRatio32) Set(val *Ratio32) {
	v.value = val
	v.isSet = true
}

func (v NullableRatio32) IsSet() bool {
	return v.isSet
}

func (v *NullableRatio32) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRatio32(val *Ratio32) *NullableRatio32 {
	return &NullableRatio32{value: val, isSet: true}
}

func (v NullableRatio32) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRatio32) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


