/*
Wasp API

REST API for the Wasp node

API version: 0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IotaCoinInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IotaCoinInfo{}

// IotaCoinInfo struct for IotaCoinInfo
type IotaCoinInfo struct {
	CoinType ObjectType `json:"coinType"`
	// The token decimals
	Decimals int32 `json:"decimals"`
	// The token description
	Description string `json:"description"`
	// The icon URL
	IconUrl string `json:"iconUrl"`
	// The base token name
	Name string `json:"name"`
	// The ticker symbol
	TickerSymbol string `json:"tickerSymbol"`
	// The total supply of BaseToken
	TotalSupply int64 `json:"totalSupply"`
}

type _IotaCoinInfo IotaCoinInfo

// NewIotaCoinInfo instantiates a new IotaCoinInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIotaCoinInfo(coinType ObjectType, decimals int32, description string, iconUrl string, name string, tickerSymbol string, totalSupply int64) *IotaCoinInfo {
	this := IotaCoinInfo{}
	this.CoinType = coinType
	this.Decimals = decimals
	this.Description = description
	this.IconUrl = iconUrl
	this.Name = name
	this.TickerSymbol = tickerSymbol
	this.TotalSupply = totalSupply
	return &this
}

// NewIotaCoinInfoWithDefaults instantiates a new IotaCoinInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIotaCoinInfoWithDefaults() *IotaCoinInfo {
	this := IotaCoinInfo{}
	return &this
}

// GetCoinType returns the CoinType field value
func (o *IotaCoinInfo) GetCoinType() ObjectType {
	if o == nil {
		var ret ObjectType
		return ret
	}

	return o.CoinType
}

// GetCoinTypeOk returns a tuple with the CoinType field value
// and a boolean to check if the value has been set.
func (o *IotaCoinInfo) GetCoinTypeOk() (*ObjectType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CoinType, true
}

// SetCoinType sets field value
func (o *IotaCoinInfo) SetCoinType(v ObjectType) {
	o.CoinType = v
}

// GetDecimals returns the Decimals field value
func (o *IotaCoinInfo) GetDecimals() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Decimals
}

// GetDecimalsOk returns a tuple with the Decimals field value
// and a boolean to check if the value has been set.
func (o *IotaCoinInfo) GetDecimalsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Decimals, true
}

// SetDecimals sets field value
func (o *IotaCoinInfo) SetDecimals(v int32) {
	o.Decimals = v
}

// GetDescription returns the Description field value
func (o *IotaCoinInfo) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *IotaCoinInfo) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *IotaCoinInfo) SetDescription(v string) {
	o.Description = v
}

// GetIconUrl returns the IconUrl field value
func (o *IotaCoinInfo) GetIconUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IconUrl
}

// GetIconUrlOk returns a tuple with the IconUrl field value
// and a boolean to check if the value has been set.
func (o *IotaCoinInfo) GetIconUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IconUrl, true
}

// SetIconUrl sets field value
func (o *IotaCoinInfo) SetIconUrl(v string) {
	o.IconUrl = v
}

// GetName returns the Name field value
func (o *IotaCoinInfo) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *IotaCoinInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *IotaCoinInfo) SetName(v string) {
	o.Name = v
}

// GetTickerSymbol returns the TickerSymbol field value
func (o *IotaCoinInfo) GetTickerSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TickerSymbol
}

// GetTickerSymbolOk returns a tuple with the TickerSymbol field value
// and a boolean to check if the value has been set.
func (o *IotaCoinInfo) GetTickerSymbolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TickerSymbol, true
}

// SetTickerSymbol sets field value
func (o *IotaCoinInfo) SetTickerSymbol(v string) {
	o.TickerSymbol = v
}

// GetTotalSupply returns the TotalSupply field value
func (o *IotaCoinInfo) GetTotalSupply() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TotalSupply
}

// GetTotalSupplyOk returns a tuple with the TotalSupply field value
// and a boolean to check if the value has been set.
func (o *IotaCoinInfo) GetTotalSupplyOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalSupply, true
}

// SetTotalSupply sets field value
func (o *IotaCoinInfo) SetTotalSupply(v int64) {
	o.TotalSupply = v
}

func (o IotaCoinInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IotaCoinInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["coinType"] = o.CoinType
	toSerialize["decimals"] = o.Decimals
	toSerialize["description"] = o.Description
	toSerialize["iconUrl"] = o.IconUrl
	toSerialize["name"] = o.Name
	toSerialize["tickerSymbol"] = o.TickerSymbol
	toSerialize["totalSupply"] = o.TotalSupply
	return toSerialize, nil
}

func (o *IotaCoinInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"coinType",
		"decimals",
		"description",
		"iconUrl",
		"name",
		"tickerSymbol",
		"totalSupply",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIotaCoinInfo := _IotaCoinInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIotaCoinInfo)

	if err != nil {
		return err
	}

	*o = IotaCoinInfo(varIotaCoinInfo)

	return err
}

type NullableIotaCoinInfo struct {
	value *IotaCoinInfo
	isSet bool
}

func (v NullableIotaCoinInfo) Get() *IotaCoinInfo {
	return v.value
}

func (v *NullableIotaCoinInfo) Set(val *IotaCoinInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableIotaCoinInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableIotaCoinInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIotaCoinInfo(val *IotaCoinInfo) *NullableIotaCoinInfo {
	return &NullableIotaCoinInfo{value: val, isSet: true}
}

func (v NullableIotaCoinInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIotaCoinInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


