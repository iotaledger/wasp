/*
Wasp API

REST API for the Wasp node

API version: 0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OnLedgerEstimationResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OnLedgerEstimationResponse{}

// OnLedgerEstimationResponse struct for OnLedgerEstimationResponse
type OnLedgerEstimationResponse struct {
	L1 L1EstimationResult `json:"l1"`
	L2 ReceiptResponse `json:"l2"`
}

type _OnLedgerEstimationResponse OnLedgerEstimationResponse

// NewOnLedgerEstimationResponse instantiates a new OnLedgerEstimationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOnLedgerEstimationResponse(l1 L1EstimationResult, l2 ReceiptResponse) *OnLedgerEstimationResponse {
	this := OnLedgerEstimationResponse{}
	this.L1 = l1
	this.L2 = l2
	return &this
}

// NewOnLedgerEstimationResponseWithDefaults instantiates a new OnLedgerEstimationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOnLedgerEstimationResponseWithDefaults() *OnLedgerEstimationResponse {
	this := OnLedgerEstimationResponse{}
	return &this
}

// GetL1 returns the L1 field value
func (o *OnLedgerEstimationResponse) GetL1() L1EstimationResult {
	if o == nil {
		var ret L1EstimationResult
		return ret
	}

	return o.L1
}

// GetL1Ok returns a tuple with the L1 field value
// and a boolean to check if the value has been set.
func (o *OnLedgerEstimationResponse) GetL1Ok() (*L1EstimationResult, bool) {
	if o == nil {
		return nil, false
	}
	return &o.L1, true
}

// SetL1 sets field value
func (o *OnLedgerEstimationResponse) SetL1(v L1EstimationResult) {
	o.L1 = v
}

// GetL2 returns the L2 field value
func (o *OnLedgerEstimationResponse) GetL2() ReceiptResponse {
	if o == nil {
		var ret ReceiptResponse
		return ret
	}

	return o.L2
}

// GetL2Ok returns a tuple with the L2 field value
// and a boolean to check if the value has been set.
func (o *OnLedgerEstimationResponse) GetL2Ok() (*ReceiptResponse, bool) {
	if o == nil {
		return nil, false
	}
	return &o.L2, true
}

// SetL2 sets field value
func (o *OnLedgerEstimationResponse) SetL2(v ReceiptResponse) {
	o.L2 = v
}

func (o OnLedgerEstimationResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OnLedgerEstimationResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["l1"] = o.L1
	toSerialize["l2"] = o.L2
	return toSerialize, nil
}

func (o *OnLedgerEstimationResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"l1",
		"l2",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOnLedgerEstimationResponse := _OnLedgerEstimationResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOnLedgerEstimationResponse)

	if err != nil {
		return err
	}

	*o = OnLedgerEstimationResponse(varOnLedgerEstimationResponse)

	return err
}

type NullableOnLedgerEstimationResponse struct {
	value *OnLedgerEstimationResponse
	isSet bool
}

func (v NullableOnLedgerEstimationResponse) Get() *OnLedgerEstimationResponse {
	return v.value
}

func (v *NullableOnLedgerEstimationResponse) Set(val *OnLedgerEstimationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableOnLedgerEstimationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableOnLedgerEstimationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnLedgerEstimationResponse(val *OnLedgerEstimationResponse) *NullableOnLedgerEstimationResponse {
	return &NullableOnLedgerEstimationResponse{value: val, isSet: true}
}

func (v NullableOnLedgerEstimationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnLedgerEstimationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


