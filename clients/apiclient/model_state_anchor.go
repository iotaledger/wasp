/*
Wasp API

REST API for the Wasp node

API version: 0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StateAnchor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StateAnchor{}

// StateAnchor struct for StateAnchor
type StateAnchor struct {
	// The raw data of the anchor (Hex)
	Raw string `json:"raw"`
	// The state index
	StateIndex uint32 `json:"stateIndex"`
	// The state metadata
	StateMetadata string `json:"stateMetadata"`
}

type _StateAnchor StateAnchor

// NewStateAnchor instantiates a new StateAnchor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStateAnchor(raw string, stateIndex uint32, stateMetadata string) *StateAnchor {
	this := StateAnchor{}
	this.Raw = raw
	this.StateIndex = stateIndex
	this.StateMetadata = stateMetadata
	return &this
}

// NewStateAnchorWithDefaults instantiates a new StateAnchor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStateAnchorWithDefaults() *StateAnchor {
	this := StateAnchor{}
	return &this
}

// GetRaw returns the Raw field value
func (o *StateAnchor) GetRaw() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Raw
}

// GetRawOk returns a tuple with the Raw field value
// and a boolean to check if the value has been set.
func (o *StateAnchor) GetRawOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Raw, true
}

// SetRaw sets field value
func (o *StateAnchor) SetRaw(v string) {
	o.Raw = v
}

// GetStateIndex returns the StateIndex field value
func (o *StateAnchor) GetStateIndex() uint32 {
	if o == nil {
		var ret uint32
		return ret
	}

	return o.StateIndex
}

// GetStateIndexOk returns a tuple with the StateIndex field value
// and a boolean to check if the value has been set.
func (o *StateAnchor) GetStateIndexOk() (*uint32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StateIndex, true
}

// SetStateIndex sets field value
func (o *StateAnchor) SetStateIndex(v uint32) {
	o.StateIndex = v
}

// GetStateMetadata returns the StateMetadata field value
func (o *StateAnchor) GetStateMetadata() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StateMetadata
}

// GetStateMetadataOk returns a tuple with the StateMetadata field value
// and a boolean to check if the value has been set.
func (o *StateAnchor) GetStateMetadataOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StateMetadata, true
}

// SetStateMetadata sets field value
func (o *StateAnchor) SetStateMetadata(v string) {
	o.StateMetadata = v
}

func (o StateAnchor) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StateAnchor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["raw"] = o.Raw
	toSerialize["stateIndex"] = o.StateIndex
	toSerialize["stateMetadata"] = o.StateMetadata
	return toSerialize, nil
}

func (o *StateAnchor) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"raw",
		"stateIndex",
		"stateMetadata",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStateAnchor := _StateAnchor{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStateAnchor)

	if err != nil {
		return err
	}

	*o = StateAnchor(varStateAnchor)

	return err
}

type NullableStateAnchor struct {
	value *StateAnchor
	isSet bool
}

func (v NullableStateAnchor) Get() *StateAnchor {
	return v.value
}

func (v *NullableStateAnchor) Set(val *StateAnchor) {
	v.value = val
	v.isSet = true
}

func (v NullableStateAnchor) IsSet() bool {
	return v.isSet
}

func (v *NullableStateAnchor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStateAnchor(val *StateAnchor) *NullableStateAnchor {
	return &NullableStateAnchor{value: val, isSet: true}
}

func (v NullableStateAnchor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStateAnchor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


