/*
Wasp API

REST API for the Wasp node

API version: 0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the L1EstimationResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &L1EstimationResult{}

// L1EstimationResult struct for L1EstimationResult
type L1EstimationResult struct {
	// The charged gas fee (uint64 as string)
	GasFeeCharged string `json:"gasFeeCharged"`
}

type _L1EstimationResult L1EstimationResult

// NewL1EstimationResult instantiates a new L1EstimationResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewL1EstimationResult(gasFeeCharged string) *L1EstimationResult {
	this := L1EstimationResult{}
	this.GasFeeCharged = gasFeeCharged
	return &this
}

// NewL1EstimationResultWithDefaults instantiates a new L1EstimationResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewL1EstimationResultWithDefaults() *L1EstimationResult {
	this := L1EstimationResult{}
	return &this
}

// GetGasFeeCharged returns the GasFeeCharged field value
func (o *L1EstimationResult) GetGasFeeCharged() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GasFeeCharged
}

// GetGasFeeChargedOk returns a tuple with the GasFeeCharged field value
// and a boolean to check if the value has been set.
func (o *L1EstimationResult) GetGasFeeChargedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GasFeeCharged, true
}

// SetGasFeeCharged sets field value
func (o *L1EstimationResult) SetGasFeeCharged(v string) {
	o.GasFeeCharged = v
}

func (o L1EstimationResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o L1EstimationResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["gasFeeCharged"] = o.GasFeeCharged
	return toSerialize, nil
}

func (o *L1EstimationResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"gasFeeCharged",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varL1EstimationResult := _L1EstimationResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varL1EstimationResult)

	if err != nil {
		return err
	}

	*o = L1EstimationResult(varL1EstimationResult)

	return err
}

type NullableL1EstimationResult struct {
	value *L1EstimationResult
	isSet bool
}

func (v NullableL1EstimationResult) Get() *L1EstimationResult {
	return v.value
}

func (v *NullableL1EstimationResult) Set(val *L1EstimationResult) {
	v.value = val
	v.isSet = true
}

func (v NullableL1EstimationResult) IsSet() bool {
	return v.isSet
}

func (v *NullableL1EstimationResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableL1EstimationResult(val *L1EstimationResult) *NullableL1EstimationResult {
	return &NullableL1EstimationResult{value: val, isSet: true}
}

func (v NullableL1EstimationResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableL1EstimationResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


