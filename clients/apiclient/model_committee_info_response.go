/*
Wasp API

REST API for the Wasp node

API version: 0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiclient

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CommitteeInfoResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommitteeInfoResponse{}

// CommitteeInfoResponse struct for CommitteeInfoResponse
type CommitteeInfoResponse struct {
	// A list of all access nodes and their peering info.
	AccessNodes []CommitteeNode `json:"accessNodes"`
	// Whether or not the chain is active.
	Active bool `json:"active"`
	// A list of all candidate nodes and their peering info.
	CandidateNodes []CommitteeNode `json:"candidateNodes"`
	// ChainID (Hex Address).
	ChainId string `json:"chainId"`
	// A list of all committee nodes and their peering info.
	CommitteeNodes []CommitteeNode `json:"committeeNodes"`
	StateAddress string `json:"stateAddress"`
}

type _CommitteeInfoResponse CommitteeInfoResponse

// NewCommitteeInfoResponse instantiates a new CommitteeInfoResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommitteeInfoResponse(accessNodes []CommitteeNode, active bool, candidateNodes []CommitteeNode, chainId string, committeeNodes []CommitteeNode, stateAddress string) *CommitteeInfoResponse {
	this := CommitteeInfoResponse{}
	this.AccessNodes = accessNodes
	this.Active = active
	this.CandidateNodes = candidateNodes
	this.ChainId = chainId
	this.CommitteeNodes = committeeNodes
	this.StateAddress = stateAddress
	return &this
}

// NewCommitteeInfoResponseWithDefaults instantiates a new CommitteeInfoResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitteeInfoResponseWithDefaults() *CommitteeInfoResponse {
	this := CommitteeInfoResponse{}
	return &this
}

// GetAccessNodes returns the AccessNodes field value
func (o *CommitteeInfoResponse) GetAccessNodes() []CommitteeNode {
	if o == nil {
		var ret []CommitteeNode
		return ret
	}

	return o.AccessNodes
}

// GetAccessNodesOk returns a tuple with the AccessNodes field value
// and a boolean to check if the value has been set.
func (o *CommitteeInfoResponse) GetAccessNodesOk() ([]CommitteeNode, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccessNodes, true
}

// SetAccessNodes sets field value
func (o *CommitteeInfoResponse) SetAccessNodes(v []CommitteeNode) {
	o.AccessNodes = v
}

// GetActive returns the Active field value
func (o *CommitteeInfoResponse) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *CommitteeInfoResponse) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *CommitteeInfoResponse) SetActive(v bool) {
	o.Active = v
}

// GetCandidateNodes returns the CandidateNodes field value
func (o *CommitteeInfoResponse) GetCandidateNodes() []CommitteeNode {
	if o == nil {
		var ret []CommitteeNode
		return ret
	}

	return o.CandidateNodes
}

// GetCandidateNodesOk returns a tuple with the CandidateNodes field value
// and a boolean to check if the value has been set.
func (o *CommitteeInfoResponse) GetCandidateNodesOk() ([]CommitteeNode, bool) {
	if o == nil {
		return nil, false
	}
	return o.CandidateNodes, true
}

// SetCandidateNodes sets field value
func (o *CommitteeInfoResponse) SetCandidateNodes(v []CommitteeNode) {
	o.CandidateNodes = v
}

// GetChainId returns the ChainId field value
func (o *CommitteeInfoResponse) GetChainId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChainId
}

// GetChainIdOk returns a tuple with the ChainId field value
// and a boolean to check if the value has been set.
func (o *CommitteeInfoResponse) GetChainIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChainId, true
}

// SetChainId sets field value
func (o *CommitteeInfoResponse) SetChainId(v string) {
	o.ChainId = v
}

// GetCommitteeNodes returns the CommitteeNodes field value
func (o *CommitteeInfoResponse) GetCommitteeNodes() []CommitteeNode {
	if o == nil {
		var ret []CommitteeNode
		return ret
	}

	return o.CommitteeNodes
}

// GetCommitteeNodesOk returns a tuple with the CommitteeNodes field value
// and a boolean to check if the value has been set.
func (o *CommitteeInfoResponse) GetCommitteeNodesOk() ([]CommitteeNode, bool) {
	if o == nil {
		return nil, false
	}
	return o.CommitteeNodes, true
}

// SetCommitteeNodes sets field value
func (o *CommitteeInfoResponse) SetCommitteeNodes(v []CommitteeNode) {
	o.CommitteeNodes = v
}

// GetStateAddress returns the StateAddress field value
func (o *CommitteeInfoResponse) GetStateAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StateAddress
}

// GetStateAddressOk returns a tuple with the StateAddress field value
// and a boolean to check if the value has been set.
func (o *CommitteeInfoResponse) GetStateAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StateAddress, true
}

// SetStateAddress sets field value
func (o *CommitteeInfoResponse) SetStateAddress(v string) {
	o.StateAddress = v
}

func (o CommitteeInfoResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommitteeInfoResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accessNodes"] = o.AccessNodes
	toSerialize["active"] = o.Active
	toSerialize["candidateNodes"] = o.CandidateNodes
	toSerialize["chainId"] = o.ChainId
	toSerialize["committeeNodes"] = o.CommitteeNodes
	toSerialize["stateAddress"] = o.StateAddress
	return toSerialize, nil
}

func (o *CommitteeInfoResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"accessNodes",
		"active",
		"candidateNodes",
		"chainId",
		"committeeNodes",
		"stateAddress",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommitteeInfoResponse := _CommitteeInfoResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommitteeInfoResponse)

	if err != nil {
		return err
	}

	*o = CommitteeInfoResponse(varCommitteeInfoResponse)

	return err
}

type NullableCommitteeInfoResponse struct {
	value *CommitteeInfoResponse
	isSet bool
}

func (v NullableCommitteeInfoResponse) Get() *CommitteeInfoResponse {
	return v.value
}

func (v *NullableCommitteeInfoResponse) Set(val *CommitteeInfoResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCommitteeInfoResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCommitteeInfoResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommitteeInfoResponse(val *CommitteeInfoResponse) *NullableCommitteeInfoResponse {
	return &NullableCommitteeInfoResponse{value: val, isSet: true}
}

func (v NullableCommitteeInfoResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommitteeInfoResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


