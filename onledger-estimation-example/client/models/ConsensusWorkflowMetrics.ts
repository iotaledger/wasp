/**
 * Wasp API
 * REST API for the Wasp node
 *
 * OpenAPI spec version: 0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';

export class ConsensusWorkflowMetrics {
    /**
    * Shows current state index of the consensus
    */
    'currentStateIndex'?: number;
    /**
    * Shows if batch proposal is sent out in current consensus iteration
    */
    'flagBatchProposalSent': boolean;
    /**
    * Shows if consensus on batch is reached and known in current consensus iteration
    */
    'flagConsensusBatchKnown': boolean;
    /**
    * Shows if consensus algorithm is still not completed in current consensus iteration
    */
    'flagInProgress': boolean;
    /**
    * Shows if state output is received in current consensus iteration
    */
    'flagStateReceived': boolean;
    /**
    * Shows if consensus on transaction is reached in current consensus iteration
    */
    'flagTransactionFinalized': boolean;
    /**
    * Shows if transaction is posted to L1 in current consensus iteration
    */
    'flagTransactionPosted': boolean;
    /**
    * Shows if L1 reported that it has seen the transaction of current consensus iteration
    */
    'flagTransactionSeen': boolean;
    /**
    * Shows if virtual machine has returned its results in current consensus iteration
    */
    'flagVMResultSigned': boolean;
    /**
    * Shows if virtual machine is started in current consensus iteration
    */
    'flagVMStarted': boolean;
    /**
    * Shows when batch proposal was last sent out in current consensus iteration
    */
    'timeBatchProposalSent': Date;
    /**
    * Shows when algorithm was last completed in current consensus iteration
    */
    'timeCompleted': Date;
    /**
    * Shows when ACS results of consensus on batch was last received in current consensus iteration
    */
    'timeConsensusBatchKnown': Date;
    /**
    * Shows when algorithm last noted that all the data for consensus on transaction had been received in current consensus iteration
    */
    'timeTransactionFinalized': Date;
    /**
    * Shows when transaction was last posted to L1 in current consensus iteration
    */
    'timeTransactionPosted': Date;
    /**
    * Shows when algorithm last noted that transaction had been seen by L1 in current consensus iteration
    */
    'timeTransactionSeen': Date;
    /**
    * Shows when virtual machine results were last received and signed in current consensus iteration
    */
    'timeVMResultSigned': Date;
    /**
    * Shows when virtual machine was last started in current consensus iteration
    */
    'timeVMStarted': Date;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "currentStateIndex",
            "baseName": "currentStateIndex",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "flagBatchProposalSent",
            "baseName": "flagBatchProposalSent",
            "type": "boolean",
            "format": "boolean"
        },
        {
            "name": "flagConsensusBatchKnown",
            "baseName": "flagConsensusBatchKnown",
            "type": "boolean",
            "format": "boolean"
        },
        {
            "name": "flagInProgress",
            "baseName": "flagInProgress",
            "type": "boolean",
            "format": "boolean"
        },
        {
            "name": "flagStateReceived",
            "baseName": "flagStateReceived",
            "type": "boolean",
            "format": "boolean"
        },
        {
            "name": "flagTransactionFinalized",
            "baseName": "flagTransactionFinalized",
            "type": "boolean",
            "format": "boolean"
        },
        {
            "name": "flagTransactionPosted",
            "baseName": "flagTransactionPosted",
            "type": "boolean",
            "format": "boolean"
        },
        {
            "name": "flagTransactionSeen",
            "baseName": "flagTransactionSeen",
            "type": "boolean",
            "format": "boolean"
        },
        {
            "name": "flagVMResultSigned",
            "baseName": "flagVMResultSigned",
            "type": "boolean",
            "format": "boolean"
        },
        {
            "name": "flagVMStarted",
            "baseName": "flagVMStarted",
            "type": "boolean",
            "format": "boolean"
        },
        {
            "name": "timeBatchProposalSent",
            "baseName": "timeBatchProposalSent",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "timeCompleted",
            "baseName": "timeCompleted",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "timeConsensusBatchKnown",
            "baseName": "timeConsensusBatchKnown",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "timeTransactionFinalized",
            "baseName": "timeTransactionFinalized",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "timeTransactionPosted",
            "baseName": "timeTransactionPosted",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "timeTransactionSeen",
            "baseName": "timeTransactionSeen",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "timeVMResultSigned",
            "baseName": "timeVMResultSigned",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "timeVMStarted",
            "baseName": "timeVMStarted",
            "type": "Date",
            "format": "date-time"
        }    ];

    static getAttributeTypeMap() {
        return ConsensusWorkflowMetrics.attributeTypeMap;
    }

    public constructor() {
    }
}
